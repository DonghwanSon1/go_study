package main

import "fmt"

type test interface{}

func main() {
	// 인터페이스
	// 객체의 동작을 표현, 골격이다.
	// 단순히 동작에 대한 방법만 표시
	// 추상화 제공
	// 인터페이스의 메소드를 구현한 타입은 인터페이스로 사용 가능
	// Golang 을 유연하게 사용 가능
	// 덕타이핑 : Go 언어의 독창적인 특성
	// 인터페이스 -> 자바는 전략패턴, 템플릿메서드패턴, 팩토리메서드패턴, 어뎁터패턴 .... 등
	// 디자인 패턴 측면에서 client 입장세ㅓ는 메소드의 구체적인 클래스를 몰라도 인터페이스에 정의된 메서드를 사용하는 객체 보장
	// => 클래스 간의 결합도 감소 -> 유지보수성 향상, 기능 추가의 용이성 => 즉, 독립적인 프로그래밍 가능

	// 예제 1
	/**
	인터페이스 선언 방식
	type 인터페이스명 interface {
		메서드1() 반환값(타입형)
		메서드2()   // 반환값 없을 시
	}
	*/

	var t test
	fmt.Println("ex 1 : ", t) // 빈 인터페이스 경우 nil 반환

}
